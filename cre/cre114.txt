00:00:00 Intro #chapter
00:00:01 Jon Stewart <http://de.wikipedia.org/wiki/Jon_Stewart>
00:00:34 CRE Intro
00:01:01 Begrüßung #chapter
00:01:10 Tim ist immer noch auf Reisen
00:01:25 LLVM (Low Level Virtual Machine) <https://de.wikipedia.org/wiki/LLVM> #glossary
00:01:39 Tim Sander <http://www.vlsi.informatik.tu-darmstadt.de/staff/tstone/>
00:01:54 TU Darmstadt <http://www.tu-darmstadt.de/>
00:02:01 Hardware Software Co-Design #chapter
00:03:58 Compiler <https://de.wikipedia.org/wiki/Compiler> #glossary
00:04:30 Bus <https://de.wikipedia.org/wiki/Bus_(Datenverarbeitung)> #glossary
00:04:31 Multiplexer <https://de.wikipedia.org/wiki/Multiplexer> #glossary
00:04:54 CPU <https://de.wikipedia.org/wiki/Prozessor> #glossary
00:04:56 Registersatz <https://de.wikipedia.org/wiki/Registersatz> #glossary
00:05:12 Pipeline <https://de.wikipedia.org/wiki/Pipeline_(Prozessor)> #glossary
00:05:38 GCC <https://de.wikipedia.org/wiki/GNU_Compiler_Collection> #glossary
00:06:28 Anwendungsfälle für Hardware Software Co-Design
00:06:59 Koprozessor <https://de.wikipedia.org/wiki/Koprozessor> #glossary
00:07:01 FPGA <https://de.wikipedia.org/wiki/Field_Programmable_Gate_Array> #glossary
00:07:20 Fehlertoleranz <https://de.wikipedia.org/wiki/Fehlertoleranz> #glossary
00:07:47 Grundlagenforschung <https://de.wikipedia.org/wiki/Grundlagenforschung> #glossary
00:08:07 Grafikkarte <https://de.wikipedia.org/wiki/Grafikkarte> #glossary
00:08:27 Moore’s Law <https://de.wikipedia.org/wiki/Mooresches_Gesetz> #glossary
00:08:30 Transistor <https://de.wikipedia.org/wiki/Transistor> #glossary
00:08:52 Parallelisierung <https://de.wikipedia.org/wiki/Nebenl%C3%A4ufigkeit> #glossary
00:09:03 LLVM Überblick #chapter
00:09:06 GCC <https://de.wikipedia.org/wiki/GNU_Compiler_Collection> #glossary
00:09:39 The LLVM Compiler Infrastructure <http://www.llvm.org/>
00:10:10 LLVM ist modular aufgebaut
00:11:07 Geschichte von LLVM
00:11:22 Lifelong Optimization
00:13:04 JIT-Compilation (“JITing”) <https://de.wikipedia.org/wiki/Just-in-time-Kompilierung> #glossary
00:13:10 Skriptsprachen <https://de.wikipedia.org/wiki/Skriptsprache> #glossary
00:13:18 Interpreter <https://de.wikipedia.org/wiki/Interpreter> #glossary
00:13:20 Bytecode <https://de.wikipedia.org/wiki/Bytecode> #glossary
00:13:27 Maschinencode <https://de.wikipedia.org/wiki/Maschinensprache> #glossary
00:14:17 Dynamische Typisierung <https://de.wikipedia.org/wiki/Dynamische_Typisierung> #glossary
00:14:37 Javascript <https://de.wikipedia.org/wiki/JavaScript> #glossary
00:15:10 Komponenten von LLVM
00:15:30 llvmc (LLVM Compiler Driver) <http://llvm.org/releases/2.7/docs/CommandGuide/html/llvmc.html>
00:15:56 LLVM Frontend #chapter
00:15:58 GCC-Frontend <http://dragonegg.llvm.org/>
00:16:47 Brainfuck <https://de.wikipedia.org/wiki/Brainfuck> #glossary
00:17:01 Zwischencode <https://de.wikipedia.org/wiki/Zwischencode> #glossary
00:17:24 Static Single Assignments <https://en.wikipedia.org/wiki/Static_single_assignment_form> #glossary
00:18:06 GCC hat mit Version 4 auf SSA umgestellt
00:18:23 Alle LLVM-Optimierungsläufe laufen auf der internen Beschreibungssprache
00:18:34 Parser <https://de.wikipedia.org/wiki/Parser> #glossary
00:19:09 Java <https://de.wikipedia.org/wiki/Java_(Programmiersprache)> #glossary
00:19:17 C <https://de.wikipedia.org/wiki/C_(Programmiersprache)> #glossary
00:19:18 C++ <https://de.wikipedia.org/wiki/C%2B%2B> #glossary
00:19:20 Fortran <https://de.wikipedia.org/wiki/Fortran> #glossary
00:19:26 Objective-C <https://de.wikipedia.org/wiki/Objective-C> #glossary
00:21:37 GPL <https://de.wikipedia.org/wiki/GNU_General_Public_License> #glossary
00:21:40 LLVM Lizenz <http://llvm.org/releases/3.4/LICENSE.TXT>
00:21:41 University of Illinois/NCSA Open Source License <http://opensource.org/licenses/UoI-NCSA.php>
00:21:42 BSD <https://de.wikipedia.org/wiki/BSD-Lizenz> #glossary
00:22:06 Andere Frontends
00:22:08 clang
00:22:09 - Wikipedia <https://de.wikipedia.org/wiki/Clang> #glossary
00:22:10 - Projekt-Homepage <http://clang.llvm.org>
00:22:54 Assembler <https://de.wikipedia.org/wiki/Assembler_(Informatik)> #glossary
00:23:41 LLVM Middleware #chapter
00:24:06 Optimierungsläufe
00:24:14 Dead Code elimination <https://de.wikipedia.org/wiki/Dead_code_elimination> #glossary
00:25:53 LLVM Backend #chapter
00:26:06 Beschreibung der Ziel-Maschine
00:26:28 Von-Neumann-Architektur <https://de.wikipedia.org/wiki/Von-Neumann-Architektur> #glossary
00:26:29 Harvard-Architektur <https://de.wikipedia.org/wiki/Harvard-Architektur> #glossary
00:27:04 x86 <https://de.wikipedia.org/wiki/X86-Prozessor> #glossary
00:27:05 ADM64 <https://de.wikipedia.org/wiki/AMD64> #glossary
00:27:08 ARM <https://de.wikipedia.org/wiki/ARM-Architektur> #glossary
00:27:10 PowerPC <https://de.wikipedia.org/wiki/PowerPC> #glossary
00:27:35 Vektorrechner <https://de.wikipedia.org/wiki/Vektorprozessor> #glossary
00:28:06 SIMD (Single Instruction, Multiple Data) <https://de.wikipedia.org/wiki/Flynnsche_Klassifikation#SIMD_.28Single_Instruction.2C_Multiple_Data.29> #glossary
00:28:23 OpenGL <https://de.wikipedia.org/wiki/OpenGL> #glossary
00:28:41 Shader <https://de.wikipedia.org/wiki/Shader> #glossary
00:29:46 Zusammenfassung
00:30:36 Vergleich zum GCC #chapter
00:30:53 Java VM <https://de.wikipedia.org/wiki/Java_Virtual_Machine> #glossary
00:31:23 LLVM und GCC setzen auf Static Single Assignments auf
00:31:32 Unterschiede liegen in der Implementierung
00:32:25 LLVM Dokumentation <http://llvm.org/docs/>
00:32:38 Softwarearchitektur <https://de.wikipedia.org/wiki/Softwarearchitektur> #glossary
00:32:56 GCC Gimple <https://en.wikipedia.org/wiki/GIMPLE> #glossary
00:32:59 GCC RTL <https://en.wikipedia.org/wiki/Register_Transfer_Language#In_GCC> #glossary
00:34:03 “Gnade der späten Geburt” <https://de.wikipedia.org/wiki/Gnade_der_sp%C3%A4ten_Geburt> #glossary
00:34:43 LLVM Zwischensprache #chapter
00:34:46 Die Operationen sind ähnlich zu Assembler
00:35:12 Register <https://de.wikipedia.org/wiki/Register_(Computer)> #glossary
00:35:16 In SSA ist jeder Datenplatz ein-eindeutig
00:36:35 Modulgröße im Backend
00:37:32 Compilezeiten
00:39:27 Fehlermeldungen von clang
00:40:23 Apple und clang
00:40:39 Chris Lattner <http://www.nondot.org/sabre/>
00:40:57 Mutmaßungen zur Strategie von Apple
00:41:12 - Fehlermeldungen
00:41:50 - Compilezeiten
00:43:28 JIT-Kompilierung <https://de.wikipedia.org/wiki/Just-in-time-Kompilierung> #glossary
00:44:21 Zwischensprache ist sehr kompakt und kann mitgespeichert werden
00:45:41 Parallelisierung <https://de.wikipedia.org/wiki/Nebenl%C3%A4ufigkeit> #glossary
00:45:51 Multiple Cores <https://de.wikipedia.org/wiki/Mehrprozessorsystem> #glossary
00:45:55 SIMD (Single Instruction, Multiple Data) <https://de.wikipedia.org/wiki/Flynnsche_Klassifikation#SIMD_.28Single_Instruction.2C_Multiple_Data.29> #glossary
00:46:08 Parallelisierung des Compile-Vorgangs
00:47:11 Parallelisierung des produzierten Codes
00:47:40 Flynnsche Klassifikation <https://de.wikipedia.org/wiki/Flynnsche_Klassifikation> #glossary
00:47:58 AltiVec <https://de.wikipedia.org/wiki/AltiVec> #glossary
00:48:01 SSE <https://de.wikipedia.org/wiki/Streaming_SIMD_Extensions> #glossary
00:48:13 Dynamische Typisierung <https://de.wikipedia.org/wiki/Dynamische_Typisierung> #glossary
00:48:22 Skriptsprache <https://de.wikipedia.org/wiki/Skriptsprache> #glossary
00:48:26 Runtime <https://de.wikipedia.org/wiki/Laufzeitumgebung> #glossary
00:49:04 Praktische Anwendung #chapter
00:49:26 Wo kommt LLVM schon zum Einsatz?
00:49:41 Adobe Flash <https://de.wikipedia.org/wiki/Adobe_Flash> #glossary
00:49:55 LLVM Developer Meeting 2008 <http://llvm.org/devmtg/2008-08/>
00:50:31 Vortrag von Scott Petersen
00:50:32 - Vortragsfolien <http://llvm.org/devmtg/2008-08/Petersen_FlashCCompiler.pdf>
00:50:33 - Video Hi <http://llvm.org/devmtg/2008-08/Petersen_FlashCCompiler_Hi.m4v>
00:50:34 - Video Lo <http://llvm.org/devmtg/2008-08/Petersen_FlashCCompiler_Lo.3gp>
00:51:58 Ressourcen #chapter
00:52:19 LLVM Developer Meetings <http://llvm.org/devmtg/>
00:52:32 Vortrag von Tim Sander
00:52:33 - Vortragsfolien <http://llvm.org/devmtg/2008-08/Sander_HW-SW-CoDesignflowWithLLVM.pdf>
00:52:34 - Video Hi <http://llvm.org/devmtg/2008-08/Sander_HW-SW-CoDesignflowWithLLVM_Hi.m4v>
00:52:35 - Video Lo <http://llvm.org/devmtg/2008-08/Sander_HW-SW-CoDesignflowWithLLVM_Lo.3gp>
00:52:59 Google Tech Talk: Chris Lattner: LLVM 2.0 <https://www.youtube.com/watch?v=VeRaLPupGks>
00:53:11 LLVM Developer Meeting 2008 <http://llvm.org/devmtg/2008-08/>
00:54:06 Doxygen <https://de.wikipedia.org/wiki/Doxygen> #glossary
00:54:07 LLVM Doxygen Dokumentation <http://llvm.org/doxygen/>
00:54:25 LLVM Online Compiler
00:54:50 Für wen ist LLVM interessant? #chapter
00:55:52 Sample Frontend
00:56:40 Tims Optimierungslauf
00:58:04 Macht Spaß in der Forschung
00:58:32 Compilerbau <https://de.wikipedia.org/wiki/Compilerbau> #glossary
00:58:40 “Und dann kam die Aussage: ‘Compilerbau ist doch tot, da entwickelt sich doch nichts mehr.’” (Tim Sander) #quote
00:59:43 “Und für jemanden, der Informatik studiert und noch ein schönes Diplomthema braucht wäre das dann vielleicht auch der richtige Sandkasten, in den man sich mal reinsetzt um mal ordentlich mit Sand zu werfen.” (Tim Pritlove) #quote
01:00:11 Abschluss #chapter
01:01:01 CRE Outro
